"use strict";

define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), define([ "routeResolver" ], function() {
    function getBool(val) {
        return !!JSON.parse(String(val).toLowerCase());
    }
    var app = angular.module("AngularAMD", [ "ngRoute", "routeResolverServices" ]);
    return app.run([ "$location", "$rootScope", function($location, $rootScope) {
        $rootScope.$on("$routeChangeStart", function(eve, next, curr) {
            $rootScope.isLoggedIn = getBool(window.sessionStorage.getItem("auth.isLogin") || !1), 
            $rootScope.user = {
                userId: window.sessionStorage.getItem("userId"),
                firstname: window.sessionStorage.getItem("firstname"),
                lastname: window.sessionStorage.getItem("lastname"),
                gender: window.sessionStorage.getItem("gender"),
                picture: window.sessionStorage.getItem("picture"),
                username: window.sessionStorage.getItem("username")
            }, next.$$route && 1 == next.$$route.secure && 0 == $rootScope.isLoggedIn && $location.path("/login");
        });
    } ]), app.config([ "$routeProvider", "routeResolverProvider", "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", "$httpProvider", function($routeProvider, routeResolverProvider, $controllerProvider, $compileProvider, $filterProvider, $provide, $httpProvider) {
        app.register = {
            controller: $controllerProvider.register,
            directive: $compileProvider.directive,
            filter: $filterProvider.register,
            factory: $provide.factory,
            service: $provide.service,
            constant: $provide.constant
        };
        var route = routeResolverProvider.route;
        $routeProvider.when("/", route.resolve("js/dashboard/views/dashboard.html", "DashBoardController", !0)).when("/login", route.resolve("js/auth/views/login.html", "LoginController", !1)).when("/logout", route.resolve("js/auth/views/login.html", "LogoutController", !0)).when("/register", route.resolve("js/auth/views/register.html", "RegisterController", !1)).when("/profile", route.resolve("js/auth/views/profile.html", "AccountController", !0)).when("/404", route.resolve("js/common/views/404.html", "404Controller", !1)).otherwise({
            redirectTo: "/"
        });
    } ]), app;
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
}), requirejs.config({
    baseUrl: "./",
    paths: {
        angular: "bower_components/angular/angular.min",
        "angular-route": "bower_components/angular-route/angular-route.min",
        app: "js/app",
        routeResolver: "js/common/service/routeresolver",
        APIService: "js/common/service/APIService",
        LoginController: "js/auth/controller/LoginController",
        LogoutController: "js/auth/controller/LogoutController",
        RegisterController: "js/auth/controller/RegisterController",
        AccountController: "js/auth/controller/AccountController",
        ProfileService: "js/auth/service/ProfileService",
        AlertController: "js/common/controller/AlertController",
        AlertService: "js/common/service/AlertService",
        ListService: "js/common/service/ListService",
        "404Controller": "js/common/controller/404Controller",
        commonHeader: "js/common/directive/commonHeader",
        commonFooter: "js/common/directive/commonFooter",
        sidebarLeft: "js/common/directive/sidebarLeft",
        sidebarRight: "js/common/directive/sidebarRight",
        generalDirective: "js/common/directive/generalDirective",
        DashBoardController: "js/dashboard/controller/DashBoardController"
    },
    shim: {
        angular: {
            exports: "angular"
        },
        "angular-route": {
            deps: [ "angular" ],
            exports: "angular-route"
        },
        app: {
            deps: [ "angular", "angular-route", "routeResolver" ]
        },
        routeResolver: {
            deps: [ "angular-route" ]
        }
    }
}), define([ "angular", "angular-route", "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective", "AlertController" ], function(angular) {
    angular.bootstrap(document, [ "AngularAMD" ]);
}), define([ "app", "ProfileService" ], function(app) {
    app.register.controller("AccountController", [ "$scope", "$rootScope", "$location", "ProfileService", function($scope, $rootScope, $location, ProfileService) {
        $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
            $scope.profile = response[0];
        }, function(err) {
            console.log(err);
        });
    } ]);
}), define([ "app", "APIService", "AlertService", "AlertController", "ProfileService" ], function(app) {
    app.register.controller("LoginController", [ "$scope", "$rootScope", "$location", "APIService", "AlertService", "ProfileService", function($scope, $rootScope, $location, APIService, AlertService, ProfileService) {
        $rootScope.title = "Login Page", $scope.submitLogin = function(user) {
            APIService.User.login({
                username: "admin",
                password: "admin"
            }).then(function(data) {
                $rootScope.error = "", $rootScope.user = data, window.sessionStorage.setItem("auth.isLogin", !0), 
                window.sessionStorage.setItem("userId", data.userId), $rootScope.user && $rootScope.user.userId && ProfileService.get($rootScope.user.userId).then(function(response) {
                    var profile = response;
                    window.sessionStorage.setItem("firstname", profile.firstname), window.sessionStorage.setItem("lastname", profile.lastname), 
                    window.sessionStorage.setItem("gender", profile.gender), window.sessionStorage.setItem("picture", profile.picture), 
                    window.sessionStorage.setItem("username", user.username), $location.path("/");
                }, function(err) {
                    console.log(err);
                });
            }, function(error) {
                AlertService.add(error);
            });
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("LogoutController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = null, window.sessionStorage.clear(), $location.path("/login");
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.controller("RegisterController", [ "$scope", "$rootScope", "$location", "APIService", function($scope, $rootScope, $location, APIService) {
        $rootScope.title = "Registeration Page", $scope.submitRegistor = function(user) {
            APIService.User.register(user).then(function(data) {
                $rootScope.error = "", $rootScope.user = data;
            }, function(error) {
                $rootScope.error = {
                    content: error.message,
                    type: "error",
                    header: error.code
                };
            });
        };
    } ]);
}), define([ "app", "APIService" ], function(app) {
    app.register.factory("ProfileService", [ "webService", "API", function(webService, API) {
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function(userId) {
                var params = API.User.profile.params;
                return webService.callAPI(API.User.profile.method, API.User.profile.url, {
                    user_id: userId
                }, params);
            }
        };
    } ]);
}), define([ "app", "commonHeader", "commonFooter", "sidebarLeft", "sidebarRight", "generalDirective" ], function(app) {
    app.register.controller("404Controller", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app", "AlertService" ], function(app) {
    app.controller("AlertController", [ "$scope", "AlertService", function($scope, AlertService) {
        $scope.alerts = AlertService.get();
    } ]);
}), define([ "app" ], function(app) {
    app.directive("commonFooter", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/footer.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("commonHeader", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/header.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("a", function() {
        return {
            restrict: "E",
            link: function(scope, elem, attrs) {
                (attrs.ngClick || "" === attrs.href || "#" === attrs.href) && elem.on("click", function(e) {
                    e.preventDefault();
                });
            }
        };
    }), app.directive("message", function() {
        return {
            restrict: "E",
            scope: {
                alerts: "=alerts"
            },
            templateUrl: "js/common/views/alert.html",
            link: function($scope, element, attributes) {
                element.on("closed.bs.alert", function() {
                    alert("sadsad");
                });
            }
        };
    }), app.directive("autoComplete", function($timeout) {
        return function(scope, element, iAttrs) {
            element.autocomplete({
                source: scope[iAttrs.uiItems],
                select: function() {
                    $timeout(function() {
                        element.trigger("input");
                    }, 0);
                }
            });
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarLeft", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-left.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.directive("sidebarRight", function() {
        return {
            restrict: "EA",
            templateUrl: "js/common/views/aside-right.html",
            transclude: !0
        };
    });
}), define([ "app" ], function(app) {
    app.factory("AlertService", function() {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            get: function() {
                return alerts;
            }
        };
    });
}), define([ "app" ], function(app) {
    var config = {
        baseUrl: "http://localhost:1337/api/",
        access_token: "12313213123"
    };
    app.register.constant("API", {
        User: {
            login: {
                url: config.baseUrl + "Users/login",
                method: "GET",
                params: {}
            },
            register: {
                url: config.baseUrl + "Users",
                method: "POST",
                params: {
                    realm: "user",
                    username: "",
                    password: "",
                    credentials: {},
                    challenges: {},
                    email: "",
                    emailVerified: !1,
                    verificationToken: "dsffsdf2132321d2",
                    status: "enable",
                    created: new Date(),
                    lastUpdated: new Date()
                }
            },
            profile: {
                url: config.baseUrl + "profiles",
                method: "POST",
                params: {}
            }
        }
    }), app.register.service("APIService", [ "webService", "API", function(webService, API) {
        this.User = {
            login: function(user) {
                var params = API.User.login.params;
                return angular.merge(params, user), webService.callAPI("POST", API.User.login.url, params);
            },
            register: function(user) {
                var params = API.User.register.params;
                return angular.merge(params, user), webService.callAPI(API.User.register.method, API.User.register.url, params);
            }
        };
    } ]), app.register.service("webService", [ "$http", "$q", "$rootScope", function($http, $q, $rootScope) {
        function handleError(response) {
            return console.log("handleError ", response), response.data.error ? $q.reject(response.data.error) : $q.reject(response.data.error);
        }
        function handleSuccess(response) {
            return response.data;
        }
        this.callAPI = function(method, url, data, params) {
            console.log({
                method: method,
                url: url,
                data: data,
                params: params
            });
            var request = $http({
                method: method,
                url: url,
                data: data,
                params: params
            });
            return request.then(handleSuccess, handleError);
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("ListService", function() {
        var List = function() {
            this.listSize = 0, this.pos = 0, this.dataStore = [], this.clear = function() {
                delete this.dataStore, this.dataStore = [], this.listSize = this.pos = 0;
            }, this.find = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return i;
                return -1;
            }, this.getElements = function() {
                return this.dataStore;
            }, this.insert = function(element, after) {
                var insertPos = this.find(after);
                return insertPos > -1 ? (this.dataStore.splice(insertPos + 1, 0, element), ++this.listSize, 
                !0) : !1;
            }, this.append = function(element) {
                this.dataStore[this.listSize++] = element;
            }, this.remove = function(element) {
                var foundAt = this.find(element);
                return foundAt > -1 ? (this.dataStore.splice(foundAt, 1), --this.listSize, !0) : !1;
            }, this.front = function() {
                this.pos = 0;
            }, this.end = function() {
                this.pos = this.listSize - 1;
            }, this.prev = function() {
                this.pos > 0 && --this.pos;
            }, this.next = function() {
                this.pos < this.listSize - 1 && ++this.pos;
            }, this.length = function() {
                return this.listSize;
            }, this.currPos = function() {
                return this.pos;
            }, this.moveTo = function(position) {
                this.pos = position;
            }, this.getElement = function() {
                return this.dataStore[this.pos];
            }, this.contains = function(element) {
                for (var i = 0; i < this.dataStore.length; ++i) if (this.dataStore[i] == element) return !0;
                return !1;
            };
        };
        return List;
    });
}), define([ "angular" ], function(angular) {
    var routeResolver = function() {
        this.$get = function() {
            return this;
        }, this.routeConfig = function() {
            var viewsDirectory = "/app/js/views/", controllersDirectory = "/app/js/controllers/", setBaseDirectories = function(viewsDir, controllersDir) {
                viewsDirectory = viewsDir, controllersDirectory = controllersDir;
            }, getViewsDirectory = function() {
                return viewsDirectory;
            }, getControllersDirectory = function() {
                return controllersDirectory;
            };
            return {
                setBaseDirectories: setBaseDirectories,
                getControllersDirectory: getControllersDirectory,
                getViewsDirectory: getViewsDirectory
            };
        }(), this.route = function(routeConfig) {
            var resolve = function(template, controller, secure) {
                var routeDef = {};
                return routeDef.templateUrl = template, routeDef.controller = controller, routeDef.secure = secure ? secure : !1, 
                routeDef.resolve = {
                    load: [ "$q", "$rootScope", function($q, $rootScope) {
                        var dependencies = [ controller ];
                        return resolveDependencies($q, $rootScope, dependencies);
                    } ]
                }, routeDef;
            }, resolveDependencies = function($q, $rootScope, dependencies) {
                var defer = $q.defer();
                return require(dependencies, function() {
                    defer.resolve(), $rootScope.$apply();
                }), defer.promise;
            };
            return {
                resolve: resolve
            };
        }(this.routeConfig);
    }, servicesApp = angular.module("routeResolverServices", []);
    servicesApp.provider("routeResolver", routeResolver);
}), define([ "app", "AlertController" ], function(app) {
    app.register.controller("DashBoardController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.title = "Home";
    } ]);
}), define([ "app" ], function(app) {
    app.register.factory("AlertService", [ "$scope", function($scope) {
        var alerts = [], msgformat = {
            code: "USERNAME_EMAIL_REQUIRED",
            message: "username or email is required",
            name: "Error",
            type: "error"
        };
        return {
            add: function(msg) {
                angular.merge(msgformat, msg), alerts.push(msgformat);
            },
            fetch: function() {
                return alerts;
            }
        };
    } ]);
}), define([ "app" ], function(app) {
    app.register.controller("DemoController", [ "$scope", "$rootScope", "$location", function($scope, $rootScope, $location) {
        $rootScope.user = "", window.sessionStorage.setItem("auth.isLogin", !1), $location.path("/login");
    } ]);
});
//# sourceMappingURL=app.min.js.map